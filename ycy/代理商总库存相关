<?php
/**
 * 终端相关接口
 
 */

namespace app\agent\controller;


use app\common\service\BrandService;
use app\common\service\CommonService;
use app\common\service\MerchantService;
use app\common\service\ProductService;
use app\common\service\TemplateService;
use app\common\service\TerminalRateApplyService;
use app\common\service\TerminalRateService;
use app\common\service\TerminalService;
use app\common\service\TerminalTransferService;
use app\common\service\TerminalUnbindService;
use app\common\service\UserRelationService;
use app\common\service\UserService;
use app\common\validate\TerminalTransferValidate;
use think\facade\Request;
use app\common\service\TerminalTypeService as TerminalModelService;
use app\common\service\FactoryVendorService as TerminalVendorService;

class Terminal extends Common
{


    /**
     * 更新费率是模板更新
     */
    public function updateTerminalRateByTemplateId()
    {
        $terminal_id = Request::post('terminal_id','');
        $template_id = Request::post('template_id','');
        if(empty($terminal_id)){
            $this->error(100001);
        }
        $user = new UserService();
        $user_info = $user->setMap(['id' => $this->user_id])->getUserById();
        if(!$user_info){
            $this->error(100006);
        }

        //验证权限，只有一级能操作修改
        if($user_info['level'] > 1){
            $this->error(100008);
        }

        $terminal_rate = new TerminalRateService();
        try{
            $info = $terminal_rate->updateTerminalRateByTemplateId($terminal_id,$template_id,$this->organization_id);
            $this->success($info);
        }catch (\Exception $e){
            $this->error($e->getCode() == 0 ? 100000 : $e->getCode(),$e->getMessage());
        }
    }


    /**
     * 获取终端费率模板列表
     */
    public function getTerminalRateTemplateList()
    {
        $brand_id = Request::post('brand_id','');
        $user_id = Request::post('user_id','');
        if(empty($brand_id)){
            $this->error(100001);
        }
        $terminal_rate = new TerminalRateService();
        try{
            $info = $terminal_rate->getTerminalTemplateRateList($brand_id,$user_id,$this->organization_id);
            $this->success($info);
        }catch (\Exception $e){
            $this->error($e->getCode() == 0 ? 100000 : $e->getCode());
        }
    }


    /**
     * 获取终端的模版费率
     */
    public function getTerminalTemplateRate()
    {
        $terminal_id = Request::post('terminal_id','');
        $brand_id = Request::post('brand_id','');
        $template_id = Request::post('template_id','');
        if(empty($terminal_id) || empty($brand_id)){
            $this->error(100001);
        }

        $user = new UserService();
        $user_info = $user->setMap(['id' => $this->user_id])->getUserById();
        if(!$user_info){
            $this->error(100006);
        }
        //获取终端信息
        $terminal = new TerminalService();
        $terminalInfo = $terminal->getTerminalInfo(['terminal_id' => $terminal_id]);
        if (empty($terminalInfo)) {
            $this->error(500004);
        }
        $terminalInfo = $terminalInfo[0];

        $terminal_rate = new TerminalRateService();
        try{
            $info = $terminal_rate->getTerminalTemplateRateInfo($terminal_id,$brand_id,$template_id,$this->organization_id);
            if($user_info['level'] > 1 || $terminalInfo['is_rate_rise'] == 1){
                foreach ($info['list'] as &$settle){
                    if(!empty($settle['list'])){
                        foreach ($settle['list'] as &$rate){
                            // 二级以下代理没有权限修改
                            $rate['is_modify'] = 2;
                            // 2021-07-06 调价后的终端商户不展示商户费率信息，客户收割了
                            if($terminalInfo['is_rate_rise'] == 1){
                                $rate['base_rate'] = '--';
                                $rate['overrun_cap'] = '--';
                                $rate['sec_fee'] = '--';
                            }

                        }
                    }
                }
            }

            $this->success($info);
        }catch (\Exception $e){
            $this->error($e->getCode() == 0 ? 100000 : $e->getCode());
        }

    }


    /**
     * 更新终端（商户）费率
     */
    public function updateTerminalRate()
    {
        $terminal_id = Request::post('terminal_id','');
        $brand_id = Request::post('brand_id','');
        $rate_data = Request::post('rate_data','');

        if(!$terminal_id || !$brand_id){
            $this->error(100001);
        }
        $rate_data = json_decode($rate_data,true);
        // 费率为空
        if(empty($rate_data)){
            $this->error(100001);
        }
        $user = new UserService();
        $user_info = $user->setMap(['id' => $this->user_id])->getUserById();
        if(!$user_info){
            $this->error(100006);
        }

        //验证权限，只有一级能操作修改
        if($user_info['level'] > 1){
            $this->error(100008);
        }

        try{
            $terminal_rate = new TerminalRateService();
            $res = $terminal_rate->updateTerminalRate($terminal_id,$brand_id,$rate_data,$this->organization_id);
            $this->success($res);
        }catch(\Exception $e){
            trace($e->getMessage());
            $this->error($e->getCode()==0?100000:$e->getCode(),$e->getCode()!=0 ?$e->getMessage():'');
        }

    }


    /**
     * 获取终端费率修改申请列表
     * @Date: 2020/3/14 17:45
     * @throws \Exception
     */
    public function getRateApplyList()
    {
        $sn = Request::post('sn','');
        $name = Request::post('name','');
        $type = Request::post('type','');
        $phone = Request::post('phone','');
        $status = Request::post('status',null);
        $brand_id = Request::post('brand_id','');
        $is_active = Request::post('is_active',null);
        $merchant_number = Request::post('merchant_number','');

        $page = Request::post('page',1);
        $limit = Request::post('limit',10);


        $condition = [
            'organization_id' => $this->organization_id,
            'page'=>$page,
            'limit'=>$limit,
            'order' => ['status','id'=>'desc']
        ];

        !empty($phone) && $condition['phone'] = $phone ;
        !empty($name) && $condition['name'] = $name;
        !empty($type) && $condition['type'] = $type;
        !empty($brand_id) && $condition['brand_id'] = $brand_id;
        !empty($sn) && $condition['sn'] = $sn;
        !empty($merchant_number) && $condition['merchant_number'] = $merchant_number;
        $status != null && $condition['status'] = $status;
        $is_active != null && $condition['is_active'] = $is_active;
        $condition['subordinate_user_id'] = $this->subordinate_user_id;
        try{
            $terminal_rate = new TerminalRateApplyService();
            $list = $terminal_rate->getRateApplyList($condition);
            $this->success($list);

        }catch (\Exception $e){

            $this->error($e->getCode()==0?100000:$e->getCode());
        }
    }

    /**
     * 获取费率修改申请信息
     * @Date: 2020/3/14 20:12
     */
    public function getRateApplyInfo()
    {
        $id = Request::post('id','');
        if(empty($id)){
            $this->error(100001);
        }
        try{
            $terminal_rate = new TerminalRateApplyService();
            $list = $terminal_rate->getApplyInfo($id, $this->organization_id);
            $this->success($list);
        }catch(\Exception $e){
            $this->error($e->getCode()==0?100000:$e->getCode());
        }

    }

    /**
     * 获取用户对应终端政策库存中的终端
     */
    public function gerUserBrandStockTerminal()
    {
        $user_id = Request::post('user_id', '');
        if (!$user_id) $this->error(651001);
        $brand_id = Request::post('brand_id', '');
        if (!$brand_id) $this->error(651002);
        $terminal_sn = Request::post('terminal_sn', '');

        $terminal_service = new TerminalService();
        $parameter = [
            'user_id' => $user_id,
            'brand_id' => $brand_id,
            'organization_id' => $this->organization_id,
            'is_frozen' => 0,
            'is_bind' => 0,
            'merchant_id' => 0,
            'is_active' => 0,
            'field' => ['id', 'sn'],
            'limit' => 10,
        ];
        if ($terminal_sn) {
            $parameter = array_merge($parameter, ['terminal_sn' => "$terminal_sn%", 'sn_expression' => 'like']);
        }
        $terminal_info = $terminal_service->getTerminalInfo($parameter);
        $this->success($terminal_info);
    }

    /**
     * 获取url模版下载地址 1导入终端模版 2删除终端模版 3终端划拨
     */
    public function getTemplateUrl()
    {
        $type = Request::post('type');
        if (!$type) {
            $this->error(100001);
        }

        $service = new TemplateService();
        $template = $service->getTerminalTemplate($type);
        if (empty($template)) {
            $this->error(100001);
        }

        $this->success($template);
    }

    /**
     * 终端批量选择
     */
    public function terminalBatchSearch()
    {
        $param = Request::post();
        $param['type'] = Request::post('type', 2);
        $param['user_id'] = $this->user_id;
        $param['organization_id'] = $this->organization_id;

        $validate = new TerminalTransferValidate();
        if (!$validate->scene('batchSearch')->check($param)) {
            $this->error($validate->getError());
        }

        $service = new TerminalTransferService();
        $data = $service->getTerminalByRange($validate);

        $this->success($data);
    }


    /**
     * 代理商总库存
     */
    public function getTotalStockTerminal()
    {
        //获取总的代理商库存
        // 终端SN
        $sn = Request::post('sn', '');
        // 终端政策
        $brand_id = Request::post('brand_id', '');
        // 终端号
        $number = Request::post('number', '');
        // 产品类型
        $product_id = Request::post('product_id', '');
        // 是否绑定商户
        $is_bind_merchant = Request::post('is_bind_merchant', '');
        // 激活状态
        $is_active = Request::post('is_active', '');
        // 来源服务商编号
        $agent_num_from = Request::post('agent_num_from', '');
        // 来源服务商名称
        $agent_name_from = Request::post('agent_name_from', '');
        // 归属服务商编号
        $agent_num_to = Request::post('agent_num_to', '');
        // 归属服务商名称
        $agent_name_to = Request::post('agent_name_to', '');
        // 来源终端搜索数据范围  1.个人 2.直属下级  3.团队
        $search_type = Request::post('search_type', 3);
        // 商户编号
        $merchant_number = Request::post('merchant_number', '');
        // 商户名称
        $merchant_name = Request::post('merchant_name', '');
        // 绑定时间
        $bind_time = Request::post('bind_time', '');
        // 激活时间
        $active_time = Request::post('active_time', '');
        //终端划拨时间 （终端入库时间）  上级给下级划拨的时间  +++++ （其中展示永远为 上级  划拨给下级的时间）
        $send_time = Request::post('send_time') ?? [];
        //分页相关
        $page = Request::post('page', 1);
        $limit = Request::post('limit', 10);
        $subordinate_user_id = explode(',', $this->subordinate_user_id); //代理及下级所有用户id
        $user_service = new UserService();
        //查询代理信息
        $user_arr = [];
        $user_id_arr = [];
        if ($agent_num_to || $agent_name_to) {
            $user_map = [];
            $user_map[] = ['organization_id', '=', $this->organization_id];
            $agent_name_to && $user_map[] = ['real_name', 'like', "%$agent_name_to%"];
            $agent_num_to && $user_map[] = ['agent_num', '=', $agent_num_to];
            $user_data = $user_service->setField(['id', 'real_name', 'agent_num'])->setMap($user_map)->getUser();
            if (empty($user_data)) {
                $this->success(['count' => 0, 'list' => []]);
            }
            $user_id_arr1 = array_column($user_data, 'id');

            //判断是否在当前登录后台代理名下
            foreach ($user_id_arr1 as $v) {
                if (in_array($v, $subordinate_user_id)) {
                    $user_id_arr[] = $v;
                }
            }
            if (empty($user_id_arr)) {
                $this->success(['count' => 0, 'list' => []]);
            }
            $user_arr = array_column($user_data, null, 'id');
        }
        //来源用户搜索
        if ($agent_num_from || $agent_name_from ) {
            $source_map = [];
            $source_map[] = ['organization_id', '=', $this->organization_id];
            $agent_name_from && $source_map[] = ['real_name', 'like', "%$agent_name_from%"];
            $agent_num_to && $source_map[] = ['agent_num', '=', $agent_num_to];
            $user_data = $user_service->setField(['id', 'real_name', 'agent_num'])->setMap($source_map)->getUser();
            //查询当前登录用户直属下级
            $source_map = [];
            $source_map[] = ['organization_id', '=', $this->organization_id];
            $agent_num_to && $source_map[] = ['parent_id', 'in', $this->user_id];
            $subordinate = $user_service->setField(['id'])->setMap($source_map)->getUser();
            $subordinate_id = array_column($subordinate, 'id');
            array_push($subordinate_id, $this->user_id);
            if (empty($user_data)) {
                $this->success(['count' => 0, 'list' => []]);
            }
            $source_datas = [];
            foreach ($user_data as $v) {
                if (in_array($v['id'], $subordinate_id)) {
                    $source_datas[] = $v;
                }
            }
            if (empty($source_datas)) {
                $this->success(['count' => 0, 'list' => []]);
            }
            $user_id_arr = array_column($source_datas, 'id');
            //如果搜索当前用户
            if (in_array($this->user_id, $user_id_arr)) {
                $search_type = $search_type ?: 1;
            } else {
                $search_type = $search_type ?: 3;
            }
            //查询数据范围
            if ($search_type != 1) {
                $user_id_arr = $this->getUserIdsByMap($user_id_arr, $search_type);
                $user_id_arr = array_unique($user_id_arr);
                if (empty($user_id_arr)) {
                    $this->success(['count' => 0, 'list' => []]);
                }
                //查询数据范围代理商信息
                $user_map = [];
                $user_map[] = ['organization_id', '=', $this->organization_id];
                $user_map[] = ['id', 'in', $user_id_arr];
                $user_data = $user_service->setField(['id', 'real_name', 'agent_num'])->setMap($user_map)->getUser();
                if (empty($user_data)) {
                    $this->success(['count' => 0, 'list' => []]);
                }
            }
            $user_arr = array_column($user_data, null, 'id');
        }
        if($user_id_arr){
            $map[] = ['user_id', 'in', $user_id_arr];
        }else{
            $map[] = ['user_id', 'in', $subordinate_user_id];
        }

        //划拨时间
        if($send_time){
            $transfer_map[] = ['organization_id', '=', $this->organization_id];
            $terminal_transfer_service = new TerminalTransferService();
            $send_time && $transfer_map[] = ['create_time', 'between', [$send_time[0], $send_time[1]]];
            if($user_id_arr) {
                $transfer_map[] = ['receive_user_id', 'in', $user_id_arr];
            }else{//如果  没有划拨者和接收者 则取值范围为  该条链
                $transfer_map[] = ['receive_user_id', 'in', $subordinate_user_id];
            }
            $transfer_terminal_ids= $terminal_transfer_service->getOwnersBySend($transfer_map);
            if(!empty($transfer_terminal_ids)){//terminal_id  集合不为空
                $map[] = ['id', 'in', $transfer_terminal_ids];
            }else{
                $this->success(['count' => 0, 'list' => []]);
            }
        }

        // 请求条件star  terminal表相关的
        $map[] = ['organization_id', '=', $this->organization_id];//机构
        //SN
        if ($sn) $map[] = ['sn', 'in', explode(',', $sn)];
        // 终端号
        if ($number) $map[] = ['number', 'in', explode(',', $number)];
        // 终端政策
        if ($brand_id) $map[] = ['brand_id', 'in', explode(',', $brand_id)];
        // 是否绑定商户
        if ($is_bind_merchant !== '') $map[] = $is_bind_merchant == 1 ? ['merchant_id', '<>', 0] : ['merchant_id', '=', 0];
        // 是否激活
        if ($is_active !== '') $map[] = ['is_active', '=', $is_active];
        // 绑定时间
        if ($bind_time) $map[] = ['bind_time', 'between', [$bind_time[0], $bind_time[1]]];
        // 厂商名称 终端型号 产品类型
        $terminal_model_ids = [];
        if ($product_id) {
            $model_map[] = ['organization_id', '=', $this->organization_id];
            if ($product_id) $model_map[] = ['product_id', '=', $product_id];
            $terminal_model_service = new TerminalModelService();
            $terminal_model = $terminal_model_service->getTerminalModel(['map' => $model_map, 'field' => ['id']]);
            $terminal_model_ids = array_column($terminal_model, 'id');
            // 终端型号
            if ($terminal_model_ids) $map[] = ['terminal_model_id', 'in', $terminal_model_ids];
        }
        // 商户编号和商户名称
        $merchant_ids = [];
        if ($merchant_number || $merchant_name) {
            $merchant_map[] = ['organization_id', '=', $this->organization_id];
            if ($merchant_number) $merchant_map[] = ['merchant_number', 'in', explode(',', $merchant_number)];
            if ($merchant_name) $merchant_map[] = ['name', 'in', explode(',', $merchant_name)];
            $merchant_service = new MerchantService();
            $merchant_info = $merchant_service->getMerchant([
                'map' => $merchant_map,
                'field' => ['id']
            ]);
            $merchant_ids = array_unique(array_column($merchant_info, 'id'));
            if ($merchant_ids) $map[] = ['merchant_id', 'in', $merchant_ids];
        }
        // 激活时间
        if ($active_time) $map[] = ['active_time', 'between', [$active_time[0], $active_time[1]]];
        $terminal_service = new TerminalService();
        // 查看列表数据
        $res = $terminal_service->getTerminalInfo([
            'map' => $map,
            'page' => $page,
            'limit' => $limit,
            'field' => [
                'id', 'create_time', 'terminal_in_out_main_id', 'sn', 'number',
                'brand_id', 'flow_card_id', 'terminal_source', 'first_send_time', 'is_deleted',
                'user_id', 'merchant_id', 'is_bind', 'bind_time', 'is_active', 'active_time',
                'terminal_model_id', 'admin_id'
            ],
            'is_have_count' => 1,
            'order' => ['id' => 'desc']
        ]);
        $data = [];
        if (!empty($res['list'])) {
            $data = [];
            // 获取政策
            $brand_ids = array_unique(array_column($res['list'], 'brand_id'));
            $brand_info = [];
            if ($brand_ids) {
                $brand_service = new BrandService();
                $brand_info = $brand_service->getBrandInfo(
                    ['brand_id' => $brand_id, 'organization_id' => $this->organization_id]
                );
                $brand_info = array_column($brand_info, null, 'id');
            }
            // 获取型号
            $terminal_model_id = array_unique(array_column($res['list'], 'terminal_model_id'));
            $terminal_model_service = new TerminalModelService();
            $terminal_model_info = $terminal_model_service->getTerminalModel([
                'map' => [
                    ['id', 'in', $terminal_model_id],
                    ['organization_id', '=', $this->organization_id]
                ]
            ]);
            // 产品类型
            $product_ids = array_unique(array_column($terminal_model_info, 'product_id'));
            $product_info = [];
            if ($product_ids) {
                $product_service = new ProductService();
                $product_info = $product_service->getProduct([
                    'map' => [
                        ['id', 'in', $product_ids],
                        ['organization_id', '=', $this->organization_id]
                    ]
                ]);
                $product_info = array_column($product_info, null, 'id');
            }
            // 获取厂商
            $terminal_vendor_id = array_unique(array_column($terminal_model_info, 'factory_id'));
            $terminal_vendor_info = [];
            if ($terminal_vendor_id) {
                $terminal_vendor_service = new TerminalVendorService();
                $terminal_vendor_info = $terminal_vendor_service->getTerminalVendor([
                    'map' => [
                        ['id', 'in', $terminal_vendor_id],
                        ['organization_id', '=', $this->organization_id]
                    ]
                ]);
                $terminal_model_info = array_column($terminal_model_info, null, 'id');
                $terminal_vendor_info = array_column($terminal_vendor_info, null, 'id');
            }
            // 获取用户
            //获取 所有的终端userid集合 以及一条链的   userid集合
            $user_service = new UserService();
            $user_info = $user_service->setMap([
                ['id', 'in', implode(',', $subordinate_user_id)]
            ])
                ->setField(['id', 'real_name', 'agent_num', 'level'])
                ->getUser();
            if ($user_info) $user_info = array_column($user_info, null, 'id');

            //获取划拨的相关信息
            //通过sn  获取最后一次的划拨信息 取出  划拨的时间   划拨者
            $transfer_sn_ids = array_column($res['list'], 'user_id', 'id');
            $terminal_transfer_service = new TerminalTransferService();
            $terminal_transfer = [];
            foreach ($transfer_sn_ids as $trk => $trv) {
                $send_map = [
                    'terminal_id' => $trk,
                    'receive_user_id' => $trv
                ];
                $ress = $terminal_transfer_service->getInfoBySnAndOwn($send_map);
                if (!empty($ress)) {
                    $terminal_transfer[] = $ress;
                }
            }
            if ($terminal_transfer) $terminal_transfer = array_column($terminal_transfer, null, 'terminal_id');
            // 获取商户
            $merchant_ids = array_unique(array_column($res['list'], 'merchant_id'));
            $merchant_info = [];
            if ($merchant_ids) {
                $merchant_service = new MerchantService();
                $merchant_info = $merchant_service->getMerchant([
                    'map' => [
                        ['id', 'in', $merchant_ids]
                    ],
                    'field' => ['id', 'name', 'merchant_number', 'third_bind_time']
                ]);
                $merchant_info = array_column($merchant_info, null, 'id');
            }
            //解绑时间
            $terminal_ids = array_column($res['list'], null, 'sn');
            $unbind_map = [['organization_id', '=', $this->organization_id]];
            $merchant_change_bind_log_service = new TerminalUnbindService();
            $unbind_info = [];
            if (!empty($terminal_ids)) {
                $unbind_map = [
                    ['terminal_sn', 'in', array_keys($terminal_ids)],
                ];
                $parameter['map'] = $unbind_map;
                $unbind_info = $merchant_change_bind_log_service->getTerminalUnbindLog($parameter);
            }
            if (!empty($unbind_info)) {
                $unbind_info = array_column($unbind_info, 'terminal_id');
            }

            //来源代理商 如果   该机具归属一级 则来源为一级相关
            //如果是二级一下  则只展示 二级相关 以此 类推

            foreach ($res['list'] as $k => &$v) {
                $terminal_model = $terminal_model_info[$v['terminal_model_id']] ?? [];
                $terminal_vendor = $terminal_vendor_info[$terminal_model['factory_id'] ?? 0] ?? [];
                $merchant_data = ($v['merchant_id'] == 0 || !isset($merchant_info[$v['merchant_id']])) ? [] : $merchant_info[$v['merchant_id']];
                $terminal_transfers = !isset($terminal_transfer[$v['id']]) ? [] : $terminal_transfer[$v['id']];//划拨相关信息
                $unbind_infos = !isset($unbind_info['id']) ? [] : $unbind_info['id'];//解绑相关信息
                $data[] = [
                    'id' => $v['id'],
                    // 终端序列号
                    'sn' => $v['sn'],
                    // 终端号
                    'number' => !empty($v['number']) ? $v['number'] : '--',
                    // 终端政策编号
                    'brand_number' => $brand_info[$v['brand_id'] ?? 0]['number'] ?? '--',
                    // 终端政策
                    'brand_id' => $brand_info[$v['brand_id'] ?? 0]['name'] ?? '--',

                    // 厂商名称
                    'terminal_vendor_name' => $terminal_vendor['name'] ?? '--',
                    // 终端型号
                    'terminal_model_type' => $terminal_model['model'] ?? '--',
                    // 产品类型
                    'product_name' => $product_info[$terminal_model['product_id'] ?? 0]['product_name'] ?? '--',
                    // 终端来源
                    'terminal_source_name' => $v['terminal_source'] == 1 ? '新采购' : (($v['terminal_source'] == 2) ? '携机入网' : '--'),
                    // 关联状态
                    'status_name' => $v['is_deleted'] == 1 ? '已删除' : (($v['brand_id'] == 0) ? '未关联政策' : '已关联政策'),
                    // 是否在总库存
                    'is_in_stock' => ($v['user_id'] == 0 && $v['is_deleted'] == 0) ? '是' : '否',
                    //终端入库时间
                    'send_time' => !isset($terminal_transfers['create_time']) ? '--' : $terminal_transfers['create_time'],
                    // 首次終端入库时间
                   'first_send_time' => $v['first_send_time'] ?? '--',
                    // 服务商编号划拨
                    'agent_num_from' => !isset($terminal_transfers['transfer_user_id']) ? '--' : ($user_info[$terminal_transfers['transfer_user_id']]['agent_num'] ?? '--'),
                    // 服务商名称划拨
                    'agent_name_from' => !isset($terminal_transfers['transfer_user_id']) ? '--    ' : ($user_info[$terminal_transfers['transfer_user_id']]['real_name'] ?? '--'),
                    // 是否绑定商户
                    'is_bind_merchant' => $v['merchant_id'] == 0 ? '未绑定' : '已绑定',
                    // 商户编号
                    'merchant_number' => $v['merchant_id'] == 0 ? '--' : ($merchant_data['merchant_number'] ?? '--'),
                    // 商户名称
                    'merchant_name' => $v['merchant_id'] == 0 ? '--' : ($merchant_data['name'] ?? '--'),
                    // 绑定时间
                    'bind_time' => $v['merchant_id'] == 0 ? '--' : ($merchant_data['third_bind_time'] ?? '--'),
                    // 激活状态
                    'is_active' => $v['is_active'] == 0 ? '未激活' : '已激活',
                    // 激活时间
                    'active_time' => $v['is_active'] == 1 ? $v['active_time'] : '--',
                    //解绑时间
                    'unbind_time' => !isset($unbind_infos['create_time']) ? '--' : $unbind_infos['create_time'],
                    // 额外字段
                    'user_id' => $v['user_id'],
                ];
            }
        }
        $basic_data['list'] = $data;
        $basic_data['count'] = $res['count'];
        $this->success($basic_data ?? []);
    }

    /**
     * 根据map获取整个层级用户ID
     * @param $userId
     * @param $type
     * @return array
     */
    public function getUserIdsByMap($userId, $type)
    {
        $user_service = new UserService();
        $userIds = [];
        if ($type == 1) {
            $userIds = $userId;
        } else if ($type == 2) {
            // 直属
            $sub_user_data = $user_service->setMap(['parent_id' => $userId])
                ->setField(['id'])
                ->getUser();
            if ($sub_user_data) {
                $userIds = array_column($sub_user_data, 'id');
            }
        } else if ($type == 3) {
            $user = new UserRelationService();
            foreach ($userId as $id) {
                $subUserId = $user->setMap(['user_id' => $id])->getSubordinateUser();
                $subUserId[] = $id;
                $userIds = array_merge($userIds, $subUserId);
            }
        }
        return $userIds;
    }

}
