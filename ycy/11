<?php
/**
 * Created by PhpStorm.
 * User: zhaoguangsen
 * Date: 2020/3/21
 * Time: 9:43 AM
 */

namespace app\agent\controller;


use app\common\service\BrandService;
use app\common\service\TerminalService;
use app\common\service\TransactionService;
use app\common\service\TerminalCallbackService;
use app\common\service\UserRelationService;
use app\common\service\UserService;
use app\common\utils\ConstHelper;
use think\facade\Env;
use think\facade\Request;
use app\common\request\SendRequest;
use app\common\utils\PhpOffice;
use app\common\utils\SentryLog;
use PhpOffice\PhpSpreadsheet\Reader\Exception;

class TerminalCallback extends Common
{

    /**
     * 终端选择限制数量
     * @var int
     */
    private $restrict_number = 1000;

    private $status = [
        1 => '待处理',
        2 => '已完成',
        3 => '已拒绝',
        4 => '已撤回'
    ];

    /**
     * 获取可以回拨的用户
     */
    public function getTransferCallbackUser()
    {
        $real_name = Request::post('real_name', '');
        $phone = is_numeric($real_name) ? $real_name : '';
        if(!empty($phone)) $real_name = '';

        $service = new UserService();
        $subordinate_user_id = explode(',', $this->subordinate_user_id);
        $u_id = array_search($this->user_id, $subordinate_user_id);
        if ($u_id !== false) array_splice($subordinate_user_id, $u_id, 1);

        if (!empty($subordinate_user_id)) {

            $service->setMap([
                ['organization_id', '=', $this->organization_id],
                ['id', 'in', implode(',', $subordinate_user_id)],
                ['real_name', 'like', "%$real_name%"],
                ['phone', 'like', "%$phone%"]
            ]);
            $service->setField(['id', 'real_name', 'phone', 'nickname', 'agent_num']);
            $service->setLimit(10);
            $res = $service->getUser();
            $data = [];
            if ($res) {
                foreach ($res as $k => $v) {
                    $data[] = [
                        'id' => $v['id'],
                        'real_name' => empty($v['real_name']) ? $v['nickname'] : $v['real_name'],
                        'phone' => substr($v['phone'], 0, 3) . '****' . substr($v['phone'], -4, 4)
                    ];
                }
            }
            $this->success($data);
        }
        $this->success([]);
    }

    /**
     * 终端回拨
     */
    public function terminalCallback()
    {
        // 回拨方式
        $callback_type = Request::post('callback_type');
        !$callback_type && $this->error(700046);
        // 终端政策ID
        $brand_id = Request::post('brand_id');
        !$brand_id && $this->error(700001);

        if ($callback_type == 1) {
            // 上传文件
            $file = Request::file('file');
            if (!$file) $this->error(700002);
            $init_terminal_sn = $this->getFileData($file);
            if (!$init_terminal_sn) $this->error(700005);
            if (empty($init_terminal_sn[0])) $this->error(700005);

            $init_terminal_sn = $init_terminal_sn[0];
            // 不要第一行
            unset($init_terminal_sn[1]);
            $init_terminal_sn = array_values(array_column($init_terminal_sn, 'A'));
            $init_terminal_sn = array_filter($init_terminal_sn);

        }else{
            // 被回拨人
            $cover_callback_user_id = Request::post('cover_callback_user_id');
            !$cover_callback_user_id && $this->error(700047);
            // 终端ID 逗号相连
            $terminal_id = Request::post('terminal_id');
            !$terminal_id && $this->error(700011);
            $init_terminal_sn = explode(',', $terminal_id);

        }


        try{

            $terminal = new TerminalCallbackService();
            if($callback_type == 2){
                $res = $terminal->listTerminalCallback($init_terminal_sn,$cover_callback_user_id,$brand_id,$this->user_id,$this->organization_id,$callback_type, $this->user_id);
            }else{
                $res = $terminal->tableTerminalCallback($init_terminal_sn,$brand_id,$this->user_id,$this->organization_id,$callback_type, $this->user_id);
            }
            if($res && $res['code'] == 0){
                $this->error(700049, '', $callback_type == 1 ? $res['data']:'');
            }
            $this->success($res['data']);
        }catch (\Exception $e){
            $this->error($e->getCode() == 0 ? 100000 : $e->getCode());
        }

    }

    /**
     * 回拨列表
     */
    public function terminalCallbackList()
    {
        $page = Request::post('page', '');
        $limit = Request::post('limit', '');
        $order_num = Request::post('order_num', '');
        $brand_id = Request::post('brand_id', '');
        $terminal_sn = Request::post('terminal_sn', '');
        $cover_callback_user_name = Request::post('cover_callback_user_name', '');
        $cover_callback_user_phone = Request::post('cover_callback_user_phone', '');
        $start_time = Request::post('start_time', '');
        $end_time = Request::post('end_time', '');

        if (!$page || !$limit) {
            $this->error(100001);
        }
        $parameter=[];
        $parameter=[
            ['organization_id','=',$this->organization_id],
            ['is_have_count','=',1],
            ['page','=',1],
            ['limit','=',1],
            ['callback_user_id','=',$this->user_id],
            ['order','=','id desc']
        ];


//        $parameter = [
//            'organization_id' => $this->organization_id,
//            'is_have_count' => 1,
//            'page' => $page,
//            'limit' => $limit,
//            'callback_user_id' => $this->user_id,
//            'order' => ['id' => 'desc']
//        ];

        !empty($order_num) && $parameter[]=['order_num','=',$order_num];
        !empty($brand_id) && $parameter[]=['brand_id' ,'=', $brand_id];
        if (!empty($start_time) && !empty($end_time)) {
            $parameter[]=['transfer_time','between',[$start_time,$end_time] ];
        }

        if (!empty($condition['start_time']) && !empty($condition['end_time'])) {
            $condition['transfer_time'] = [
                'start_time' => $condition['start_time'],
                'end_time' => $condition['end_time']
            ];
        }
        $user_service = new UserService();
        $service = new TerminalCallbackService();

        // 通过接收人进行搜索
        $cover_callback_user_id = [];
        if (!empty($cover_callback_user_name)) {
            $user_service->setMap(['real_name' => $cover_callback_user_name, 'organization_id' => $this->organization_id]);
            $user_service->setField(['id']);
            $user_info = $user_service->getUser();
            if (empty($user_info[0])) {
                $this->success(['list' => [], 'count' => 0]);
            }
            $cover_callback_user_id = array_column($user_info, 'id');
        }
        // 通过接收人手机号进行搜索
        if (!empty($cover_callback_user_phone)) {
            $user_map = [];
            $user_map[] = ['phone', '=', $cover_callback_user_phone];
            $user_map[] = ['organization_id', '=', $this->organization_id];
            if (!empty($cover_callback_user_id)) {
                $user_map[] = ['id', 'in', $cover_callback_user_id];
            }
            $user_service->setMap($user_map);
            $user_service->setField(['id']);
            $user_info = $user_service->getUser();
            if (empty($user_info[0])) {
                $this->success(['list' => [], 'count' => 0]);
            }
            $cover_callback_user_id = array_column($user_info, 'id');
        }
        // 通过终端SN进行搜索
        $transfer_id = '';
        if (!empty($terminal_sn)) {
            $terminal = new TerminalService();
            $terminal_info = $terminal->getTerminalInfo(['organization_id' => $this->organization_id, 'terminal_sn' => $terminal_sn]);
            if (!$terminal_info) {
                $this->success(['list' => [], 'count' => 0]);
            }
            $terminal_id = $terminal_info[0]['id'];
            $side_log = $service->getSideLog(['terminal_id' => $terminal_id]);
            if (!$side_log) {
                $this->success(['list' => [], 'count' => 0]);
            }
            $transfer_id = array_column($side_log, 'terminal_callback_id');
        }

        if ($cover_callback_user_id !== '') $parameter[]=['cover_callback_user_id','in',$cover_callback_user_id] ;
        if ($transfer_id !== '') $parameter[]=['id','=',$transfer_id];

        $res = $service->getTerminalCallbackLog($parameter);
        print_r($res);die();
        if (!$res) {
            $this->success(['list' => [], 'count' => 0]);
        }

        $brand_info = [];
        if ($res['list']) {
            $callback_user_ids = array_column($res['list'], 'callback_user_id');
            $cover_callback_user_ids = array_column($res['list'], 'cover_callback_user_id');
            $user_ids = array_unique(array_merge($callback_user_ids, $cover_callback_user_ids));
            if ($user_ids) {
                $user_service->setMap([['id', 'in', $user_ids]]);
                $user_service->setField(['id', 'real_name', 'phone']);
                $user_all_msg = $user_service->getUser();
                $user_all_msg = array_column($user_all_msg, null, 'id');
            }
            // 品牌信息
            $brand_ids = array_column($res['list'], 'brand_id');
            $brand_service = new BrandService();
            $brand_info = $brand_service->getBrandInfo(['brand_id' => $brand_ids]);
            $brand_info = array_column($brand_info, 'name', 'id');
        }

        $data = [];
        foreach ($res['list'] as $k => $v) {
            $data[] = [
                'id' => $v['id'],
                'order_num' => $v['order_num'],
                'cover_callback_user_id' => $v['cover_callback_user_id'],
                'cover_callback_user_name' => $user_all_msg[$v['cover_callback_user_id']]['real_name'] ?? '',
                'cover_callback_user_phone' => $user_all_msg[$v['cover_callback_user_id']]['phone'] ?? '',
                'brand_name' => $brand_info[$v['brand_id']] ?? '',
                'terminal_num' => $v['terminal_num'],
                'transfer_time' => $v['transfer_time'],
            ];
        }

        $this->success(['list' => $data, 'count' => $res['count']]);
    }

    /**
     * 回拨详情
    */
    public function terminalCallbackSideInfo(){
        // 回拨方式
        $side_id = Request::post('side_id');
        !$side_id && $this->error(700047);

        $cover_callback_user_id = Request::post('cover_callback_user_id');
        !$cover_callback_user_id && $this->error(100001);

        $page = Request::post('page', '');
        $limit = Request::post('limit', '');

        $parameter = [
            'organization_id' => $this->organization_id,
            'is_have_count' => 1,
            'page' => $page,
            'limit' => $limit,
            'order' => ['id' => 'desc'],
            'terminal_callback_id' => $side_id
        ];

        $service = new TerminalCallbackService();
        $side_log = $service->getSideLog($parameter);

        if (!$side_log) {
            $this->success(['list' => [], 'count' => 0]);
        }

        $terminal_id = array_column($side_log['list'], 'terminal_id');

        $terminal = new TerminalService();
        $exists_sn = $terminal->getTerminalInfo(
            [
                'terminal_id' => $terminal_id,
                'is_have_deleted' => 0
            ]
        );
        $exists_sn_all = array_column($exists_sn, 'sn', 'id');

        unset($exists_sn);
        $user_service = new UserService();
        $user_service->setMap([['id', '=', $cover_callback_user_id]]);
        $user_service->setField(['id', 'real_name', 'phone']);
        $user_info = $user_service->getUserById();

        foreach($side_log['list'] as $v){
            $terminal_id = $v['terminal_id'];
            $data[] = [
                'id' => $v['id'],
                'terminal_sn' => $exists_sn_all[$terminal_id],
                'cover_callback_user_name' => $user_info['real_name'] ?? '平台',
                'cover_callback_user_phone' => $user_info['phone'] ?? '平台'
            ];
        }

        $this->success(['list' => $data, 'count' => $side_log['count']]);
    }

    /**
     * 设置失败数据
     * @param $data
     * @param $key
     * @return array|bool|string
     */
    public function setErrorDataCache($data, $key)
    {
        return SendRequest::send(['data' => $data, 'key' => $key], config('request_url.service.terminal.ser_terminal_cache'));

    }

    /**
     * 获取可以回拨的终端
     */
    public function getTransferCallback()
    {
        $brand_id = Request::post('brand_id');
        if (!$brand_id) {
            $this->error(700001);
        }
        $cover_callback_user_id = Request::post('cover_callback_user_id');
        if (!$cover_callback_user_id) {
            $this->error(700047);
        }
        $terminal_sn = Request::post('terminal_sn', '');
        $brand_service = new BrandService();
        $brand_info = $brand_service->getBrandInfo(['brand_id' => $brand_id, 'organization_id' => $this->organization_id]);
        if (empty($brand_info[0])) {
            $this->error(700025);
        }
        $select_where = [];
        $find_where = [
            ['user_id', '=', $cover_callback_user_id],
            ['brand_id', '=', $brand_id],
            ['organization_id', '=', $this->organization_id],
            ['sn', 'like', "$terminal_sn%"],
            ['is_bind', '=', 0],
            ['is_active', '=', 0],
            ['is_frozen', '=', 0],
            ['is_deleted', '=', 0],
        ];

        $terminal_service = new TerminalService();
        $parameter = [
            'find_where' => $find_where,
            'select_where' => $select_where,
            'order' => ['sn' => 'asc'],
            'limit' => 1000,
        ];
        $terminal_info = $terminal_service->getShuttleTerminal($parameter);
        $data = [];
        foreach ($terminal_info as $k => $v) {
            $data[] = [
                'id' => $v['id'],
                'sn' => $v['sn'],
            ];
        }
        $this->success($data);
    }

    /**
     * 检测文件合法性
     * @param $file \think\file
     */
    public function getFileData($file)
    {
        // 放置到文件目录下
        $info = $file->move(config('app.excel_path'));
        if(!$info){
            return false;
        }
        // 获取保存的路径
        $file_save_path = $info->getSaveName();

        $excel = new PhpOffice();
        try {
            $path = config('app.excel_path') . '/' . $file_save_path;
            $res = $excel->readExcel($path);
        } catch (Exception $e) {
            return false;
        } catch (\PhpOffice\PhpSpreadsheet\Exception $e) {
            return false;
        }
        unlink($path);
        if (!$res) {
            return false;
        }
        return $res;
    }
}
